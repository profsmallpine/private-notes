package html

import (
	"fmt"
	"github.com/profsmallpine/private-notes/domain"
	"github.com/xy-planning-network/trails/postgres"
	"time"
)

templ ListNotes(notesPD postgres.PagedData, group *domain.Group) {
	<ul role="list" class="divide-y divide-gray-200">
		// TODO: use raw go to protect against panics
		for _, note := range *notesPD.Items.(*[]*domain.Note) {
			<li>
				<a href={ templ.URL(fmt.Sprintf("/groups/%d/notes/%d", note.GroupID, note.ID)) } class="block hover:bg-gray-50" title="View the note">
					<div class="px-4 py-4 flex items-center sm:px-6">
						<div class="min-w-0 flex-1 sm:flex sm:items-center sm:justify-between">
							<div class="truncate">
								<div class="flex text-sm">
									<p class="font-medium text-indigo-600 truncate">{ note.Title }</p>
									<p class="ml-1 flex-shrink-0 font-normal text-gray-500">
										by { note.Author.FullName() }
									</p>
								</div>
								<div class="mt-2 flex">
									<div class="flex items-center text-sm text-gray-500">
										<!-- Heroicon name: solid/calendar -->
										<svg class="flex-shrink-0 mr-1.5 h-5 w-5 text-gray-400" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
											<path fill-rule="evenodd" d="M6 2a1 1 0 00-1 1v1H4a2 2 0 00-2 2v10a2 2 0 002 2h12a2 2 0 002-2V6a2 2 0 00-2-2h-1V3a1 1 0 10-2 0v1H7V3a1 1 0 00-1-1zm0 5a1 1 0 000 2h8a1 1 0 100-2H6z" clip-rule="evenodd"></path>
										</svg>
										<p>
											Created on
											<time datetime={ note.CreatedAt.Format(time.DateOnly) }>{ note.CreatedAtHumanized() }</time>
										</p>
									</div>
								</div>
							</div>
						</div>
						<div class="ml-5 flex-shrink-0">
							<!-- Heroicon name: chevron-right -->
							<svg class="h-5 w-5 text-gray-400" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
								<path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd"></path>
							</svg>
						</div>
					</div>
				</a>
			</li>
		}
	</ul>
	@Pagination(notesPD, fmt.Sprintf("/groups/%d/notes", group.ID))
}

templ NewNote(group *domain.Group) {
	<form action={ templ.URL(fmt.Sprintf("/groups/%d/notes/create", group.ID)) } method="POST">
		<div>
			<div>
				<h3 class="text-lg leading-6 font-medium text-gray-900">
					New Note
				</h3>
				<p class="mt-1 text-sm leading-5 text-gray-500">
					This information will be shared with your group upon submit.
				</p>
			</div>
			<div class="mt-6 grid grid-cols-1 gap-y-6 gap-x-4 sm:grid-cols-6">
				<div class="sm:col-span-2">
					<label for="title" class="block text-sm font-medium leading-5 text-gray-700">
						Title
					</label>
					<div class="mt-1 rounded-md shadow-sm">
						<input name="title" type="text" class="shadow-sm focus:ring-indigo-500 focus:border-indigo-500 block w-full sm:text-sm border-gray-300 rounded-md" required/>
					</div>
				</div>
				<div class="sm:col-span-6">
					// {{/* <label for="content" class="block text-sm font-medium leading-5 text-gray-700">
					//   Content
					// </label> */}}
					<div class="mt-1 rounded-md shadow-sm">
						<input id="content" type="hidden" name="content"/>
						<trix-editor input="content" type="text" class="shadow-sm block focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm border border-gray-300 rounded-md h-64 trix-content"></trix-editor>
					</div>
				</div>
			</div>
		</div>
		<div class="mt-8 border-t border-gray-200 pt-5">
			<div class="flex justify-end">
				<span class="inline-flex rounded-md shadow-sm">
					<button
						type="button"
						class="py-2 px-4 border border-gray-300 rounded-md text-sm leading-5 font-medium text-gray-700 hover:text-gray-500 focus:outline-none focus:border-blue-300 focus:shadow-outline-blue active:bg-gray-50 active:text-gray-800 transition duration-150 ease-in-out"
						hx-get={ fmt.Sprintf("/groups/%d", group.ID) }
						hx-target="body"
						hx-push-url="true"
					>
						Cancel
					</button>
				</span>
				<span class="ml-3 inline-flex rounded-md shadow-sm">
					<button type="submit" class="inline-flex justify-center py-2 px-4 border border-transparent text-sm leading-5 font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-500 focus:outline-none focus:border-indigo-700 focus:shadow-outline-indigo active:bg-indigo-700 transition duration-150 ease-in-out">
						Submit
					</button>
				</span>
			</div>
		</div>
	</form>
}

templ ShowNote(note *domain.Note) {
	<div class="relative py-16 overflow-hidden">
		<div class="relative px-4 sm:px-6 lg:px-8">
			<div class="text-lg max-w-prose mx-auto mb-6">
				<p class="text-base text-center leading-6 text-indigo-600 font-semibold tracking-wide uppercase">Written By</p>
				<h1 class="mt-2 mb-8 text-3xl text-center leading-8 font-extrabold tracking-tight text-gray-900 sm:text-4xl sm:leading-10">
					{ note.Author.FullName() }
				</h1>
				<div class="trix-content">
					@templ.Raw(note.Content)
				</div>
				<div class="mt-16">
					for _, comment := range note.Comments {
						<div class="flex flex-col mb-4 rounded-lg border overflow-hidden">
							<div class="flex-1 p-4 flex flex-col justify-between">
								<div class="flex-1">
									<p class="text-sm leading-6 text-gray-500 whitespace-pre-line">
										{ comment.Content }
									</p>
								</div>
								<div class="mt-2 flex items-center">
									<div class="flex-shrink-0">
										if comment.Author.PictureURL != "" {
											<img class="h-10 w-10 rounded-full" src={ comment.Author.PictureURL } alt=""/>
										} else {
											<span class="inline-flex items-center justify-center h-8 w-8 rounded-full bg-gray-500">
												<span class="text-sm font-medium leading-none text-white">{ comment.Author.Initials() }</span>
											</span>
										}
									</div>
									<div class="ml-3">
										<p class="text-sm leading-5 font-medium text-gray-900">
											{ comment.Author.FullName() }
										</p>
										<div class="flex text-sm leading-5 text-gray-500">
											<time datetime={ comment.CreatedAt.Format(time.DateTime) }>
												{ comment.CreatedAtHumanized() }
											</time>
										</div>
									</div>
								</div>
							</div>
						</div>
					}
					<form action={ templ.URL(fmt.Sprintf("/groups/%d/notes/%d/comments/create", note.GroupID, note.ID)) } method="POST">
						<div class="space-y-6">
							<div class="space-y-1">
								<div class="rounded-md shadow-sm">
									<textarea id="content" name="content" rows="3" class="shadow-sm block w-full focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm border border-gray-300 rounded-md" placeholder="Add a comment" required></textarea>
								</div>
							</div>
							<div class="flex justify-end">
								<span class="ml-3 inline-flex rounded-md shadow-sm">
									<button type="submit" class="relative inline-flex items-center px-4 py-2 border border-transparent text-sm leading-5 font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-500 focus:outline-none focus:shadow-outline-indigo focus:border-indigo-700 active:bg-indigo-700">
										Submit
									</button>
								</span>
							</div>
						</div>
					</form>
				</div>
			</div>
		</div>
	</div>
}
