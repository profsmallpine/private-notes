package html

import (
	"fmt"
	"github.com/profsmallpine/private-notes/domain"
	"time"
)

templ ListMeetings(meetings []*domain.Meeting) {
	<ul role="list" class="divide-y divide-gray-200">
		for _, meeting := range meetings {
			<li>
				<a href={ templ.URL(fmt.Sprintf("/groups/%d/meetings/%d", meeting.GroupID, meeting.ID)) } class="block hover:bg-gray-50" title="View the meeting">
					<div class="px-4 py-4 flex items-center sm:px-6">
						<div class="min-w-0 flex-1">
							<div class="flex">
								<div class="flex items-center text-sm text-gray-500">
									<!-- Heroicon name: solid/calendar -->
									<svg class="flex-shrink-0 mr-1.5 h-5 w-5 text-gray-400" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
										<path fill-rule="evenodd" d="M6 2a1 1 0 00-1 1v1H4a2 2 0 00-2 2v10a2 2 0 002 2h12a2 2 0 002-2V6a2 2 0 00-2-2h-1V3a1 1 0 10-2 0v1H7V3a1 1 0 00-1-1zm0 5a1 1 0 000 2h8a1 1 0 100-2H6z" clip-rule="evenodd"></path>
									</svg>
									<p>
										Meeting held on
										<time datetime={ meeting.CreatedAt.Format(time.DateTime) }>{ meeting.CreatedAtHumanized() }</time>
									</p>
								</div>
							</div>
						</div>
						<div class="ml-5 flex-shrink-0">
							<!-- Heroicon name: chevron-right -->
							<svg class="h-5 w-5 text-gray-400" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
								<path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd"></path>
							</svg>
						</div>
					</div>
				</a>
			</li>
		}
	</ul>
}

templ ShowMeeting(meeting *domain.Meeting, cu *domain.User) {
	<div class="relative py-16 overflow-hidden">
		<div class="relative px-4 sm:px-6 lg:px-8">
			<div class="text-lg max-w-prose mx-auto mb-6">
				<p class="text-base text-center leading-6 text-indigo-600 font-semibold tracking-wide uppercase">{ meeting.Group.Name } Meeting On</p>
				<h1 class="mt-2 mb-8 text-3xl text-center leading-8 font-extrabold tracking-tight text-gray-900 sm:text-4xl sm:leading-10">
					{ meeting.CreatedAtHumanized() }
				</h1>
				if cu.IsAdmin && !meeting.IsComplete() {
					<button
						type="button"
						class="rounded-md border border-transparent bg-red-600 px-4 py-2 text-sm font-medium text-white shadow-sm hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-offset-2 w-full text-center"
						hx-get={ string(templ.URL(fmt.Sprintf("/groups/%d/meetings/%d/update", meeting.GroupID, meeting.ID))) }
						hx-target="body"
						hx-push-url="true"
					>
						Complete Meeting
					</button>
				}
				<div class="mt-16">
					<div
						id="goals"
						hx-get={ string(templ.URL(fmt.Sprintf("/groups/%d/meetings/%d", meeting.GroupID, meeting.ID))) }
						hx-trigger="every 10s"
						hx-select="#goals"
						hx-swap="outerHTML"
					>
						for _, goal := range meeting.Goals {
							@ShowGoal(goal)
						}
					</div>
					if !meeting.IsComplete() {
						<div id="new-goal">
							<form
								action={ templ.URL(fmt.Sprintf("/groups/%d/meetings/%d/goals/create", meeting.GroupID, meeting.ID)) }
								method="POST"
							>
								<div class="space-y-6">
									<div class="space-y-1">
										<div class="rounded-md shadow-sm">
											<textarea id="content" name="content" rows="3" class="shadow-sm block w-full focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm border border-gray-300 rounded-md" placeholder="Add a goal!" required></textarea>
										</div>
										<select id="mood" name="mood" class="mt-1 block w-full py-2 px-3 border border-gray-300 bg-white rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm" required>
											<option value="" disabled selected>Select a mood</option>
											for _, mood := range domain.GoalMoods {
												<option value={ mood }>{ mood }</option>
											}
										</select>
										<select id="style" name="style" class="mt-1 block w-full py-2 px-3 border border-gray-300 bg-white rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm" required>
											<option value="" disabled selected>Select a style</option>
											for _, style := range domain.GoalStyles {
												<option value={ style.String() }>{ style.String() }</option>
											}
										</select>
									</div>
									<div class="flex justify-end">
										<span class="ml-3 inline-flex rounded-md shadow-sm">
											<button type="submit" class="relative inline-flex items-center px-4 py-2 border border-transparent text-sm leading-5 font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-500 focus:outline-none focus:shadow-outline-indigo focus:border-indigo-700 active:bg-indigo-700">
												Submit
											</button>
										</span>
									</div>
								</div>
							</form>
						</div>
					}
				</div>
			</div>
		</div>
	</div>
}
